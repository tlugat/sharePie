definitions:
  auth.LoginInput:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  models.EventState:
    enum:
    - active
    - archived
    type: string
    x-enum-varnames:
    - EventStateActive
    - EventStateArchived
  types.CreateAchievementInput:
    properties:
      condition:
        type: string
      description:
        type: string
      name:
        type: string
      points:
        type: integer
    required:
    - condition
    - description
    - name
    - points
    type: object
  types.CreateAvatarInput:
    properties:
      name:
        type: string
      url:
        type: string
    required:
    - name
    - url
    type: object
  types.CreateCategoryInput:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  types.CreateEventInput:
    properties:
      category:
        type: integer
      description:
        type: string
      goal:
        type: number
      image:
        type: string
      name:
        type: string
    required:
    - description
    - name
    type: object
  types.CreateExpenseInput:
    properties:
      amount:
        type: number
      description:
        type: string
      event:
        type: integer
      image:
        type: string
      name:
        type: string
      participants:
        items:
          $ref: '#/definitions/types.ParticipantInput'
        type: array
      payers:
        items:
          $ref: '#/definitions/types.PayerInput'
        type: array
      tag:
        type: integer
    required:
    - amount
    - description
    - event
    - name
    - participants
    - payers
    type: object
  types.CreateTagInput:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  types.CreateUserInput:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - email
    - password
    - username
    type: object
  types.JoinEventInput:
    properties:
      code:
        type: string
    required:
    - code
    type: object
  types.ParticipantInput:
    properties:
      amount:
        type: number
      id:
        type: integer
    type: object
  types.PayerInput:
    properties:
      amount:
        type: number
      id:
        type: integer
    type: object
  types.UpdateAchievementInput:
    properties:
      condition:
        type: string
      description:
        type: string
      name:
        type: string
      points:
        type: integer
    type: object
  types.UpdateAvatarInput:
    properties:
      name:
        type: string
      url:
        type: string
    type: object
  types.UpdateCategoryInput:
    properties:
      name:
        type: string
    type: object
  types.UpdateEventInput:
    properties:
      category:
        type: integer
      description:
        type: string
      goal:
        type: number
      image:
        type: string
      name:
        type: string
      users:
        items:
          type: integer
        type: array
    type: object
  types.UpdateEventStateInput:
    properties:
      state:
        $ref: '#/definitions/models.EventState'
    required:
    - state
    type: object
  types.UpdateExpenseInput:
    properties:
      amount:
        type: number
      category:
        type: integer
      description:
        type: string
      id:
        type: integer
      image:
        type: string
      name:
        type: string
      participants:
        items:
          $ref: '#/definitions/types.ParticipantInput'
        type: array
      payers:
        items:
          $ref: '#/definitions/types.PayerInput'
        type: array
    type: object
  types.UpdateTagInput:
    properties:
      title:
        type: string
    type: object
  types.UpdateUserFirebaseTokenInput:
    properties:
      firebaseToken:
        type: string
    required:
    - firebaseToken
    type: object
  types.UpdateUserInput:
    properties:
      avatar:
        type: integer
      email:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is the API of SharePie app. You can visit the GitHub repository
    at https://github.com/tlugat/sharePie-api
  title: SharePie API
  version: "1.0"
paths:
  /achievements:
    get:
      consumes:
      - application/json
      description: Retrieves a list of all achievements from the database
      produces:
      - application/json
      responses:
        "200":
          description: Returns a list of achievements
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Returns an error if the request fails
          schema:
            additionalProperties: true
            type: object
      summary: List all achievements
      tags:
      - Achievements
    post:
      consumes:
      - application/json
      description: Adds a new achievement to the database, linked to the authenticated
        user
      parameters:
      - description: Achievement creation data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/types.CreateAchievementInput'
      produces:
      - application/json
      responses:
        "200":
          description: Returns the newly created achievement
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Returns an error if the input is invalid or user authentication
            fails
          schema:
            additionalProperties: true
            type: object
      summary: Add a new achievement
      tags:
      - Achievements
  /achievements/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes an achievement from the database
      parameters:
      - description: Achievement ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Confirms successful deletion
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Returns an error if the achievement cannot be deleted
          schema:
            additionalProperties: true
            type: object
      summary: Delete an achievement
      tags:
      - Achievements
    get:
      consumes:
      - application/json
      description: Retrieves an achievement by its ID from the database
      parameters:
      - description: Achievement ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Returns the specified achievement
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Returns an error if the achievement is not found
          schema:
            additionalProperties: true
            type: object
      summary: Get a single achievement
      tags:
      - Achievements
    patch:
      consumes:
      - application/json
      description: Updates an existing achievement with new data
      parameters:
      - description: Achievement ID
        in: path
        name: id
        required: true
        type: integer
      - description: Achievement update data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/types.UpdateAchievementInput'
      produces:
      - application/json
      responses:
        "200":
          description: Returns the updated achievement
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Returns an error if the input is invalid or the achievement
            does not exist
          schema:
            additionalProperties: true
            type: object
      summary: Update an achievement
      tags:
      - Achievements
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticates a user and returns a JWT token
      parameters:
      - description: Login credentials
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/auth.LoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: Returns a JWT token
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Returns an error if the login credentials are invalid
          schema:
            additionalProperties: true
            type: object
      summary: Log in a user
      tags:
      - Auth
  /auth/signup:
    post:
      consumes:
      - application/json
      description: Registers a new user in the system
      parameters:
      - description: User information
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/types.CreateUserInput'
      produces:
      - application/json
      responses:
        "200":
          description: Returns the created user
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Returns an error if the input is invalid
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Returns an error if the user creation fails
          schema:
            additionalProperties: true
            type: object
      summary: Register a new user
      tags:
      - Auth
  /auth/validate:
    get:
      consumes:
      - application/json
      description: Checks if the current user is valid in the system
      produces:
      - application/json
      responses:
        "200":
          description: Returns the current user
          schema:
            additionalProperties: true
            type: object
      summary: Validate a user
      tags:
      - Auth
  /avatars:
    get:
      consumes:
      - application/json
      description: Retrieves a list of all avatars from the database
      produces:
      - application/json
      responses:
        "200":
          description: Returns a list of avatars
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Returns an error if the request fails
          schema:
            additionalProperties: true
            type: object
      summary: List all avatars
      tags:
      - Avatars
    post:
      consumes:
      - application/json
      description: Adds a new avatar to the database, linked to the authenticated
        user
      parameters:
      - description: Avatar creation data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/types.CreateAvatarInput'
      produces:
      - application/json
      responses:
        "200":
          description: Returns the newly created avatar
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Returns an error if the input is invalid or user authentication
            fails
          schema:
            additionalProperties: true
            type: object
      summary: Add a new avatar
      tags:
      - Avatars
  /avatars/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes an avatar from the database
      parameters:
      - description: Avatar ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Confirms successful deletion
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Returns an error if the avatar cannot be deleted
          schema:
            additionalProperties: true
            type: object
      summary: Delete an avatar
      tags:
      - Avatars
    get:
      consumes:
      - application/json
      description: Retrieves an avatar by its ID from the database
      parameters:
      - description: Avatar ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Returns the specified avatar
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Returns an error if the avatar is not found
          schema:
            additionalProperties: true
            type: object
      summary: Get a single avatar
      tags:
      - Avatars
    patch:
      consumes:
      - application/json
      description: Updates an existing avatar with new data
      parameters:
      - description: Avatar ID
        in: path
        name: id
        required: true
        type: integer
      - description: Avatar update data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/types.UpdateAvatarInput'
      produces:
      - application/json
      responses:
        "200":
          description: Returns the updated avatar
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Returns an error if the input is invalid or the avatar does
            not exist
          schema:
            additionalProperties: true
            type: object
      summary: Update an avatar
      tags:
      - Avatars
  /categories:
    get:
      consumes:
      - application/json
      description: Retrieves a list of all categories from the database
      produces:
      - application/json
      responses:
        "200":
          description: Returns a list of categories
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Returns an error if the request fails
          schema:
            additionalProperties: true
            type: object
      summary: List all categories
      tags:
      - Categories
    post:
      consumes:
      - application/json
      description: Adds a new category to the database
      parameters:
      - description: Category creation data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/types.CreateCategoryInput'
      produces:
      - application/json
      responses:
        "200":
          description: Returns the newly created category
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Returns an error if the input is invalid
          schema:
            additionalProperties: true
            type: object
      summary: Add a new category
      tags:
      - Categories
  /categories/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a category from the database
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Confirms successful deletion
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Returns an error if the category cannot be deleted
          schema:
            additionalProperties: true
            type: object
      summary: Delete a category
      tags:
      - Categories
    get:
      consumes:
      - application/json
      description: Retrieves a category by its ID from the database
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Returns the specified category
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Returns an error if the category is not found
          schema:
            additionalProperties: true
            type: object
      summary: Get a single category
      tags:
      - Categories
    put:
      consumes:
      - application/json
      description: Updates an existing category with new data
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      - description: Category update data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/types.UpdateCategoryInput'
      produces:
      - application/json
      responses:
        "200":
          description: Returns the updated category
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Returns an error if the input is invalid or the category does
            not exist
          schema:
            additionalProperties: true
            type: object
      summary: Update a category
      tags:
      - Categories
  /events:
    get:
      consumes:
      - application/json
      description: Retrieves a list of all events from the database
      produces:
      - application/json
      responses:
        "200":
          description: Returns a list of events
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Returns an error if the request fails
          schema:
            additionalProperties: true
            type: object
      summary: List all events
      tags:
      - Events
    post:
      consumes:
      - application/json
      description: Adds a new event to the database, linked to the authenticated user
      parameters:
      - description: Event creation data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/types.CreateEventInput'
      produces:
      - application/json
      responses:
        "200":
          description: Returns the newly created event
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Returns an error if the input is invalid or user authentication
            fails
          schema:
            additionalProperties: true
            type: object
      summary: Add a new event
      tags:
      - Events
  /events/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes an event from the database
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Confirms successful deletion
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Returns an error if the event cannot be deleted
          schema:
            additionalProperties: true
            type: object
      summary: Delete an event
      tags:
      - Events
    get:
      consumes:
      - application/json
      description: Retrieves an event by its ID from the database
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Returns the specified event
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Returns an error if the event is not found
          schema:
            additionalProperties: true
            type: object
      summary: Get a single event
      tags:
      - Events
    patch:
      consumes:
      - application/json
      description: Updates an existing event with new data
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: integer
      - description: Event update data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/types.UpdateEventInput'
      produces:
      - application/json
      responses:
        "200":
          description: Returns the updated event
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Returns an error if the input is invalid or the event does
            not exist
          schema:
            additionalProperties: true
            type: object
      summary: Update an event
      tags:
      - Events
  /events/{id}/expenses:
    get:
      consumes:
      - application/json
      description: Retrieves a list of expenses for a specified event
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Returns a list of expenses for the event
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Returns an error if the event does not exist
          schema:
            additionalProperties: true
            type: object
      summary: Get event expenses
      tags:
      - Events
  /events/{id}/state:
    patch:
      consumes:
      - application/json
      description: Updates the state of an existing event
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: integer
      - description: Event state update data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/types.UpdateEventStateInput'
      produces:
      - application/json
      responses:
        "200":
          description: Returns the updated event
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Returns an error if the input is invalid or the event does
            not exist
          schema:
            additionalProperties: true
            type: object
      summary: Update event state
      tags:
      - Events
  /events/{id}/summary:
    get:
      consumes:
      - application/json
      description: Retrieves a summary of balances for a specified event
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Returns a list of balances for the event
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Returns an error if the event does not exist
          schema:
            additionalProperties: true
            type: object
      summary: Get event balance list
      tags:
      - Events
  /events/{id}/transactions:
    get:
      consumes:
      - application/json
      description: Retrieves a list of transactions for a specified event
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Returns a list of transactions for the event
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Returns an error if the event does not exist
          schema:
            additionalProperties: true
            type: object
      summary: Get event transactions
      tags:
      - Events
  /events/{id}/users:
    get:
      consumes:
      - application/json
      description: Retrieves all users for a specified event
      parameters:
      - description: Event ID
        in: path
        name: eventId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Returns a list of users for the event
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Returns an error if the event does not exist
          schema:
            additionalProperties: true
            type: object
      summary: Get event users
      tags:
      - Events
  /events/join:
    post:
      consumes:
      - application/json
      description: Allows a user to join an event using a code
      parameters:
      - description: Join event data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/types.JoinEventInput'
      produces:
      - application/json
      responses:
        "200":
          description: Returns the joined event
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Returns an error if the input is invalid
          schema:
            additionalProperties: true
            type: object
        "409":
          description: Returns an error if there is a conflict (e.g., user already
            joined)
          schema:
            additionalProperties: true
            type: object
      summary: Join an event
      tags:
      - Events
  /expenses:
    get:
      consumes:
      - application/json
      description: Retrieves a list of all expenses from the database
      produces:
      - application/json
      responses:
        "200":
          description: Returns a list of expenses
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Returns an error if the request fails
          schema:
            additionalProperties: true
            type: object
      summary: List all expenses
      tags:
      - Expenses
    post:
      consumes:
      - application/json
      description: Adds a new expense to the database, linked to the authenticated
        user
      parameters:
      - description: Expense creation data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/types.CreateExpenseInput'
      produces:
      - application/json
      responses:
        "200":
          description: Returns the newly created expense
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Returns an error if the input is invalid or user authentication
            fails
          schema:
            additionalProperties: true
            type: object
      summary: Add a new expense
      tags:
      - Expenses
  /expenses/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes an expense from the database
      parameters:
      - description: Expense ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Confirms successful deletion
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Returns an error if the expense cannot be deleted
          schema:
            additionalProperties: true
            type: object
      summary: Delete an expense
      tags:
      - Expenses
    get:
      consumes:
      - application/json
      description: Retrieves an expense by its ID from the database
      parameters:
      - description: Expense ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Returns the specified expense
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Returns an error if the expense is not found
          schema:
            additionalProperties: true
            type: object
      summary: Get a single expense
      tags:
      - Expenses
    patch:
      consumes:
      - application/json
      description: Updates an existing expense with new data
      parameters:
      - description: Expense ID
        in: path
        name: id
        required: true
        type: integer
      - description: Expense update data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/types.UpdateExpenseInput'
      produces:
      - application/json
      responses:
        "200":
          description: Returns the updated expense
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Returns an error if the input is invalid or the expense does
            not exist
          schema:
            additionalProperties: true
            type: object
      summary: Update an expense
      tags:
      - Expenses
  /tags:
    get:
      consumes:
      - application/json
      description: Retrieves a list of all tags from the database
      produces:
      - application/json
      responses:
        "200":
          description: Returns a list of tags
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Returns an error if the request fails
          schema:
            additionalProperties: true
            type: object
      summary: List all tags
      tags:
      - Tags
    post:
      consumes:
      - application/json
      description: Adds a new tag to the database
      parameters:
      - description: Tag creation data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/types.CreateTagInput'
      produces:
      - application/json
      responses:
        "200":
          description: Returns the newly created tag
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Returns an error if the input is invalid
          schema:
            additionalProperties: true
            type: object
      summary: Add a new tag
      tags:
      - Tags
  /tags/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a tag from the database
      parameters:
      - description: Tag ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Confirms successful deletion
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Returns an error if the tag cannot be deleted
          schema:
            additionalProperties: true
            type: object
      summary: Delete a tag
      tags:
      - Tags
    get:
      consumes:
      - application/json
      description: Retrieves a tag by its ID from the database
      parameters:
      - description: Tag ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Returns the specified tag
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Returns an error if the tag is not found
          schema:
            additionalProperties: true
            type: object
      summary: Get a single tag
      tags:
      - Tags
    patch:
      consumes:
      - application/json
      description: Updates an existing tag with new data
      parameters:
      - description: Tag ID
        in: path
        name: id
        required: true
        type: integer
      - description: Tag update data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/types.UpdateTagInput'
      produces:
      - application/json
      responses:
        "200":
          description: Returns the updated tag
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Returns an error if the input is invalid or the tag does not
            exist
          schema:
            additionalProperties: true
            type: object
      summary: Update a tag
      tags:
      - Tags
  /users:
    get:
      consumes:
      - application/json
      description: Retrieves a list of all users from the database
      produces:
      - application/json
      responses:
        "200":
          description: Returns a list of users
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Returns an error if the request fails
          schema:
            additionalProperties: true
            type: object
      summary: List all users
      tags:
      - Users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a user from the database
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Confirms successful deletion
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Returns an error if the user cannot be deleted
          schema:
            additionalProperties: true
            type: object
      summary: Delete a user
      tags:
      - Users
    get:
      consumes:
      - application/json
      description: Retrieves a user by its ID from the database
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Returns the specified user
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Returns an error if the user is not found
          schema:
            additionalProperties: true
            type: object
      summary: Get a single user
      tags:
      - Users
    patch:
      consumes:
      - application/json
      description: Updates an existing user with new data
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User update data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/types.UpdateUserInput'
      produces:
      - application/json
      responses:
        "200":
          description: Returns the updated user
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Returns an error if the input is invalid or the user does not
            exist
          schema:
            additionalProperties: true
            type: object
      summary: Update a user
      tags:
      - Users
  /users/firebase_token:
    patch:
      consumes:
      - application/json
      description: Updates an existing user with new data
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User update data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/types.UpdateUserFirebaseTokenInput'
      produces:
      - application/json
      responses:
        "200":
          description: Returns the updated user
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Returns an error if the input is invalid or the user does not
            exist
          schema:
            additionalProperties: true
            type: object
      summary: Update a user
      tags:
      - Users
  /users/me:
    get:
      consumes:
      - application/json
      description: Retrieves the user from the token
      produces:
      - application/json
      responses:
        "200":
          description: Returns the user from the token
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Returns an error if the user cannot be retrieved
          schema:
            additionalProperties: true
            type: object
      summary: Get user from token
      tags:
      - Users
    patch:
      consumes:
      - application/json
      description: Updates an existing user with new data
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User update data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/types.UpdateUserInput'
      produces:
      - application/json
      responses:
        "200":
          description: Returns the updated user
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Returns an error if the input is invalid or the user does not
            exist
          schema:
            additionalProperties: true
            type: object
      summary: Update a user
      tags:
      - Users
securityDefinitions:
  Bearer:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
